#version 460 core

in struct {

    vec3 localPosition;
    vec3 worldPosition;

    vec3 normal;
    vec3 tangent;
    vec3 bitangent;

    vec2 uv;

} v2f;

// NOTE: Ambient light struct | 16 bytes
struct Ambient {
    vec4 u_color; // 16 | offset: 0
};

// NOTE: Directional light struct | 48 bytes
struct Directional {
    vec4 u_direction; // 16 | offset: 0
    vec4 u_diffuse;   // 16 | offset: 16
    vec4 u_specular;  // 16 | offset: 32
};

#define MAX_POINT_LIGHTS 4 // NOTE: Point lights | 256 bytes
// NOTE: Point light struct | 64 bytes
struct Point {
    vec4 u_position;   // 16 | offset: 0
    vec4 u_diffuse;    // 16 | offset: 16
    vec4 u_specular;   // 16 | offset: 32

    float u_constant;  // 4  | offset: 48
    float u_linear;    // 4  | offset: 52
    float u_quadratic; // 4  | offset: 56

    bool  u_isActive; // 4  | offset: 60
};

// NOTE: Lights Block | 320 bytes
layout(std140, binding = 2) uniform Lights {
    Ambient     u_ambientLight;                  // 16  | offset: 0
    Directional u_directionalLight;              // 48  | offset: 16
    Point       u_pointLights[MAX_POINT_LIGHTS]; // 256 | offset: 64
};

// NOTE: Data Block | 24 bytes
layout(std140, binding = 3) uniform Data {
    vec4 u_cameraPosition; // 16 | offset: 0
    vec2 u_clipping;       // 8  | offset: 16
};

uniform vec3      u_surfaceTint;
uniform layout(binding = 0) sampler2D u_albedoSampler;
uniform bool      u_albedoPresent = false;
uniform layout(binding = 1) sampler2D u_specularSampler;
uniform bool      u_specularPresent = false;
uniform layout(binding = 2) sampler2D u_normalSampler;
uniform bool      u_normalPresent = false;
uniform float     u_glossiness;

vec3 CalcDirectionalLight(
    vec3 surfaceNormal,
    vec3 surfaceAlbedo,
    float surfaceSpecular,

    vec3 cameraDirection,

    vec3 lightDirection,
    vec3 lightDiffuse,
    vec3 lightSpecular
);
vec3 CalcPointLight(
    vec3 surfaceWorldPosition,
    vec3 surfaceNormal,
    vec3 surfaceAlbedo,
    float surfaceSpecular,

    vec3 cameraDirection,

    vec3 lightPosition,
    vec3 lightDiffuse,
    vec3 lightSpecular,
    float lightConstant,
    float lightLinear,
    float lightQuadratic
);

float CalcSpecular( vec3 lightDirection, vec3 surfaceNormal, vec3 cameraDirection );

out vec4 FRAG_COLOR;
void main() {
    vec3 surfaceAlbedo = u_surfaceTint;
    if( u_albedoPresent ) {
        surfaceAlbedo *= texture2D( u_albedoSampler, v2f.uv ).rgb;
    }
    float surfaceSpecular = 0.0;
    if( u_specularPresent ) {
        surfaceSpecular = texture2D( u_specularSampler, v2f.uv ).r;
    }
    vec3 vnormal = normalize( v2f.normal );
    vec3 surfaceNormal = vnormal;
    if( u_normalPresent ) {
        vec3 vtangent   = normalize( v2f.tangent );
        vec3 vbitangent = normalize( v2f.bitangent );

        vec3 normalSample = texture2D( u_normalSampler, v2f.uv ).rgb * 2.0 - 1.0;
        mat3 tbn = mat3(
            vtangent,
            vbitangent,
            vnormal
        );
        surfaceNormal = normalize( tbn * normalSample );
    }
    vec3 surfaceColor = u_ambientLight.u_color.rgb;

    vec3 cameraDirection = normalize( u_cameraPosition.xyz - v2f.worldPosition );

    surfaceColor += CalcDirectionalLight(
        surfaceNormal,
        surfaceAlbedo,
        surfaceSpecular,
        cameraDirection,
        u_directionalLight.u_direction.xyz,
        u_directionalLight.u_diffuse.rgb,
        u_directionalLight.u_specular.rgb
    );

    for( int i = 0; i < MAX_POINT_LIGHTS; i++ ) {
        if( !u_pointLights[i].u_isActive ) { continue; }
        surfaceColor += CalcPointLight(
            v2f.worldPosition,
            surfaceNormal,
            surfaceAlbedo,
            surfaceSpecular,
            cameraDirection,
            u_pointLights[i].u_position.xyz,
            u_pointLights[i].u_diffuse.rgb,
            u_pointLights[i].u_specular.rgb,
            u_pointLights[i].u_constant,
            u_pointLights[i].u_linear,
            u_pointLights[i].u_quadratic
        );
    }

    FRAG_COLOR  = vec4( surfaceColor, 1.0 );
}

float CalcSpecular( vec3 lightDirection, vec3 surfaceNormal, vec3 cameraDirection ) {
    vec3 reflectDirection = reflect( -lightDirection, surfaceNormal );
    return pow(
        max( dot( cameraDirection, reflectDirection ), 0.0 ),
        max( u_glossiness, 1.0 )
    );
}

vec3 CalcDirectionalLight(
    vec3 surfaceNormal,
    vec3 surfaceAlbedo,
    float surfaceSpecular,

    vec3 cameraDirection,
    
    vec3 lightDirection,
    vec3 lightDiffuse,
    vec3 lightSpecular
) {
    float cutoff  = max( dot( surfaceNormal, lightDirection ), 0.0 );
    vec3 surface  = ( surfaceAlbedo * lightDiffuse );
    vec3 ambient  = surface * 0.2;
    vec3 diffuse  = surface * cutoff;
    float specularStrength = CalcSpecular( lightDirection, surfaceNormal, cameraDirection );
    vec3 specular = ( ( surfaceSpecular * lightSpecular ) * specularStrength ) * cutoff;

    return diffuse + ambient + specular;
}

vec3 CalcPointLight(
    vec3 surfaceWorldPosition,
    vec3 surfaceNormal,
    vec3 surfaceAlbedo,
    float surfaceSpecular,

    vec3 cameraDirection,

    vec3 lightPosition,
    vec3 lightDiffuse,
    vec3 lightSpecular,
    float lightConstant,
    float lightLinear,
    float lightQuadratic
) {
    vec3 lightDirection = lightPosition - surfaceWorldPosition;
    float lightDistance = length( lightDirection );
    vec3 lightColor = CalcDirectionalLight(
        surfaceNormal,
        surfaceAlbedo,
        surfaceSpecular,
        cameraDirection,
        lightDirection / lightDistance,
        lightDiffuse,
        lightSpecular
    );
    float attenuation = 1.0 / ( lightConstant + lightLinear * lightDistance + lightQuadratic * ( lightDistance * lightDistance ) );

    return lightColor * attenuation;
}
